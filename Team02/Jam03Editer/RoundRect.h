#pragma once
#include "Mof.h"

namespace sip
{
	// ********************************************************************************
	/// <summary>
	/// 角丸矩形構造体
	/// </summary>
	// ********************************************************************************
	typedef struct RoundRect : public Mof::Rectangle
	{

		MofFloat r; //! 半径

		// ********************************************************************************
		/// <summary>
		/// コンストラクタ
		/// </summary>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		RoundRect(void);

		// ********************************************************************************
		/// <summary>
		/// コンストラクタ
		/// </summary>
		/// <param name="left">左</param>
		/// <param name="top">上</param>
		/// <param name="right">右</param>
		/// <param name="bottom">下</param>
		/// <param name="r">角丸ポイント</param>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		RoundRect(MofFloat left, MofFloat top, MofFloat right, MofFloat bottom, MofFloat r);

		// ********************************************************************************
		/// <summary>
		/// コンストラクタ
		/// </summary>
		/// <param name="lt">左上</param>
		/// <param name="rb">右下</param>
		/// <param name="r">角丸ポイント</param>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		RoundRect(const Vector2& lt, const Vector2& rb, MofFloat r);

		// ********************************************************************************
		/// <summary>
		/// コンストラクタ
		/// </summary>
		/// <param name="rect">矩形</param>
		/// <param name="r">角丸ポイント</param>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		RoundRect(const Mof::Rectangle& rect, MofFloat r);

		// ********************************************************************************
		/// <summary>
		/// コンストラクタ
		/// </summary>
		/// <param name="pv">パラメータ配列</param>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		RoundRect(LPMofFloat pv);

		// ********************************************************************************
		/// <summary>
		/// コピーコンストラクタ
		/// </summary>
		/// <param name="pObj">コピー角丸矩形</param>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		RoundRect(const RoundRect& pObj);

// ********************************************************************************
/// <summary>
/// Operator
/// </summary>
// ********************************************************************************
		
		// ********************************************************************************
		/// <summary>
		/// MofFloat配列として取得
		/// </summary>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		operator LPMofFloat(void);

		// ********************************************************************************
		/// <summary>
		/// Rectangleとして取得
		/// </summary>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		operator Mof::Rectangle(void);

		// ********************************************************************************
		/// <summary>
		/// ==判断
		/// </summary>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		bool operator == (const RoundRect& v) const;

		// ********************************************************************************
		/// <summary>
		/// !=判断
		/// </summary>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		bool operator != (const RoundRect& v) const;

	}RoundRect;

	const Mof::Rectangle NoneRect      = Mof::Rectangle(); //! 判定用定数矩形
	const Mof::Circle    NoneCircle    = Mof::Circle();    //! 判定用定数円
	const sip::RoundRect NoneRoundRect = sip::RoundRect(); //! 判定用定数角丸矩形

	// ********************************************************************************
	/// <summary>
	/// 角丸矩形クラス
	/// </summary>
	// ********************************************************************************
	class CRoundRect : public RoundRect
	{
	private:

		Mof::Rectangle m_RectArray[2];
		Mof::Circle    m_CircleArray[4];

	public:
		// ********************************************************************************
		/// <summary>
		/// コンストラクタ
		/// </summary>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		CRoundRect(void);

		// ********************************************************************************
		/// <summary>
		/// コンストラクタ
		/// </summary>
		/// <param name="left">左</param>
		/// <param name="top">上</param>
		/// <param name="right">右</param>
		/// <param name="bottom">下</param>
		/// <param name="r">角丸ポイント</param>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		CRoundRect(MofFloat left, MofFloat top, MofFloat right, MofFloat bottom, MofFloat r);

		// ********************************************************************************
		/// <summary>
		/// コンストラクタ
		/// </summary>
		/// <param name="lt">左上</param>
		/// <param name="rb">右下</param>
		/// <param name="r">角丸ポイント</param>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		CRoundRect(const Vector2& lt, const Vector2& rb, MofFloat r);

		// ********************************************************************************
		/// <summary>
		/// コンストラクタ
		/// </summary>
		/// <param name="rect">矩形</param>
		/// <param name="r">角丸ポイント</param>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		CRoundRect(const Mof::Rectangle& rect, MofFloat r);

		// ********************************************************************************
		/// <summary>
		/// コンストラクタ
		/// </summary>
		/// <param name="pv">パラメータ配列</param>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		CRoundRect(LPMofFloat pv);

		// ********************************************************************************
		/// <summary>
		/// コピーコンストラクタ
		/// </summary>
		/// <param name="pObj">コピー角丸矩形</param>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		CRoundRect(const RoundRect& pObj);

		// ********************************************************************************
		/// <summary>
		/// 矩形拡張<br>
		/// Left, Topに - e、Right, Bottomに + e、this->rに + rを行う
		/// </summary>
		/// <param name="e">拡張サイズ</param>
		/// <param name="r">半径の拡張サイズ</param>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		void Expansion(const MofFloat& e, const MofFloat& r);

		// ********************************************************************************
		/// <summary>
		/// 矩形拡張<br>
		/// Left, Topに - ex、Right, Bottomに + ey、this->rに + rを行う
		/// </summary>
		/// <param name="ex">X拡張サイズ</param>
		/// <param name="ey">Y拡張サイズ</param>
		/// <param name="r">半径の拡張サイズ</param>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		void Expansion(const MofFloat& ex, const MofFloat& ey, const MofFloat& r);

		// ********************************************************************************
		/// <summary>
		/// 矩形の幅と高さをそのままにm移動する。
		/// </summary>
		/// <param name="m">移動量</param>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		void Translation(const Vector2& m);

		// ********************************************************************************
		/// <summary>
		/// 矩形の幅と高さをそのままにposの位置に移動する。
		/// </summary>
		/// <param name="pos">位置</param>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		void SetPosition(const Vector2& pos);

		// ********************************************************************************
		/// <summary>
		/// 幅の設定
		/// </summary>
		/// <param name="w">設定する幅</param>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		void SetWidth(const MofFloat& w);

		// ********************************************************************************
		/// <summary>
		/// 高さの設定
		/// </summary>
		/// <param name="h">設定する高さ</param>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		void SetHeight(const MofFloat& h);

		// ********************************************************************************
		/// <summary>
		/// 半径の設定
		/// </summary>
		/// <param name="r">設定する半径</param>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		void SetRadius(const MofFloat& r);

		// ********************************************************************************
		/// <summary>
		/// 座標との当たり判定
		/// </summary>
		/// <param name="px">当たり判定をとるX座標</param>
		/// <param name="py">当たり判定をとるY座標</param>
		/// <returns>当たったかどうか</returns>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		MofBool CollisionPoint(const MofFloat& px, const MofFloat& py) const;

		// ********************************************************************************
		/// <summary>
		/// 座標との当たり判定
		/// </summary>
		/// <param name="p">当たり判定をとる座標</param>
		/// <returns>当たったかどうか</returns>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		MofBool CollisionPoint(const Vector2& p) const;

		// ********************************************************************************
		/// <summary>
		/// 値の設定
		/// </summary>
		/// <param name="left">左</param>
		/// <param name="top">上</param>
		/// <param name="right">右</param>
		/// <param name="bottom">下</param>
		/// <param name="r">角丸半径</param>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		void SetValue(MofFloat left, MofFloat top, MofFloat right, MofFloat bottom, MofFloat r);

		// ********************************************************************************
		/// <summary>
		/// 描画
		/// </summary>
		/// <param name="color">描画色</param>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		void Render(const MofU32& color = MOF_COLOR_WHITE);

// ********************************************************************************
/// <summary>
/// Get
/// </summary>
// ********************************************************************************

		// ********************************************************************************
		/// <summary>
		/// 幅の取得
		/// </summary>
		/// <returns>幅</returns>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		MofFloat GetWidth(void) const;

		// ********************************************************************************
		/// <summary>
		/// 高さの取得
		/// </summary>
		/// <returns>高さ</returns>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		MofFloat GetHeight(void) const;

		// ********************************************************************************
		/// <summary>
		/// 角丸半径の所得
		/// </summary>
		/// <returns>角丸半径</returns>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		MofFloat GetRadius(void) const;

		// ********************************************************************************
		/// <summary>
		/// 中心座標の取得
		/// </summary>
		/// <returns>中心座標</returns>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		Vector2 GetCenter(void) const;

// ********************************************************************************
/// <summary>
/// operator
/// </summary>
// ********************************************************************************

		// ********************************************************************************
		/// <summary>
		/// RoundRectとして取得
		/// </summary>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		operator sip::RoundRect(void);

	private:

		// ********************************************************************************
		/// <summary>
		/// 角丸の計算
		/// </summary>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		void CalcRectCircle(void);
	};

	// ********************************************************************************
	/// <summary>
	/// static 角丸矩形汎用クラス
	/// </summary>
	// ********************************************************************************
	class CRoundRectUtilities
	{
	private:
		CRoundRectUtilities(void) = delete;
		~CRoundRectUtilities(void) = delete;
	public:
		// ********************************************************************************
		/// <summary>
		/// 座標との当たり判定
		/// </summary>
		/// <param name="rrect">判定をとる角丸矩形</param>
		/// <param name="px">当たり判定をとるX座標</param>
		/// <param name="py">当たり判定をとるY座標</param>
		/// <returns>当たったかどうか</returns>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		static MofBool CollisionPoint(const sip::RoundRect& rrect, const MofFloat& px, const MofFloat& py);

		// ********************************************************************************
		/// <summary>
		/// 座標との当たり判定
		/// </summary>
		/// <param name="rrect">判定をとる角丸矩形</param>
		/// <param name="p">当たり判定をとる座標</param>
		/// <returns>当たったかどうか</returns>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		static MofBool CollisionPoint(const sip::RoundRect& rrect, const Vector2& p);

		// ********************************************************************************
		/// <summary>
		/// 角丸矩形の描画
		/// </summary>
		/// <param name="rrect">描画する角丸矩形</param>
		/// <param name="color">描画色</param>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		static void Render(const sip::RoundRect& rrect, const MofU32& color = MOF_COLOR_WHITE);

		// ********************************************************************************
		/// <summary>
		/// 画像を角丸矩形の中に納めて描画
		/// </summary>
		/// <param name="rrect">マスクになる角丸矩形</param>
		/// <param name="pTexture">描画する画像ポインタ</param>
		/// <param name="color">描画する画像の色</param>
		/// <created>いのうえ,2020/10/30</created>
		/// <changed>いのうえ,2020/10/30</changed>
		// ********************************************************************************
		static void Render(const sip::RoundRect& rrect, const LPTexture& pTexture, const MofU32& color = MOF_COLOR_WHITE);
	};
}

